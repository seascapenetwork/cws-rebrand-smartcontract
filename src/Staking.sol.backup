// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

/// @title Staking - LP代币质押与签到奖励合约
/// @author Seascape Network
/// @notice 本合约支持LP/ERC20/BNB质押，线性释放奖励，以及基于签到的额外激励
/// @dev 使用OpenZeppelin v5.0.2，Solidity 0.8.20，包含重入保护和暂停机制
contract Staking is Ownable, ReentrancyGuard, Pausable {
    using SafeERC20 for IERC20;

    // ============================================
    // 常量
    // ============================================

    /// @notice 精度缩放因子，用于高精度计算
    uint256 private constant SCALER = 1e18;

    /// @notice BNB原生代币的地址表示
    address private constant BNB_ADDRESS = address(0);

    // ============================================
    // 数据结构
    // ============================================

    /// @notice Session质押活动结构体
    /// @dev 每个session代表一轮独立的质押活动
    struct Session {
        address stakingToken;           // 质押代币地址 (address(0)表示BNB)
        address rewardToken;            // LP质押奖励代币地址
        address checkInRewardToken;     // 签到奖励代币地址
        uint256 totalReward;            // LP质押总奖励数量
        uint256 checkInRewardPool;      // 签到奖励池总数量
        uint256 startTime;              // 活动开始时间(unix时间戳)
        uint256 endTime;                // 活动结束时间(unix时间戳)
        uint256 totalStaked;            // 当前总质押量(TVL)
        uint256 rewardPerSecond;        // 每秒释放的奖励 = totalReward / duration
        uint256 accRewardPerShare;      // 累积的每份额奖励(scaled by SCALER)
        uint256 lastRewardTime;         // 上次更新奖励的时间
        uint256 totalWeightedStake;     // 全局加权质押量 Σ(用户质押 × boost点数)
        bool active;                    // session是否激活(防止重复使用)
    }

    /// @notice 用户信息结构体
    /// @dev 记录每个用户在特定session中的状态
    struct UserInfo {
        uint256 amount;                 // 用户质押数量
        uint256 rewardDebt;             // 奖励债务(用于计算待领取奖励)
        uint256 boost;                  // 用户boost点数(签到后为1，未签到为0)
        bool hasWithdrawn;              // 是否已提取(防止重复提取)
        bool hasCheckedIn;              // 是否已签到
    }

    // ============================================
    // 状态变量
    // ============================================

    /// @notice 当前session ID计数器
    uint256 public currentSessionId;

    /// @notice sessionId => Session信息
    mapping(uint256 => Session) public sessions;

    /// @notice sessionId => user address => UserInfo
    mapping(uint256 => mapping(address => UserInfo)) public userInfo;

    /// @notice 记录所有历史session的时间范围，用于检查重叠
    struct TimeRange {
        uint256 startTime;
        uint256 endTime;
    }
    TimeRange[] private sessionTimeRanges;

    // ============================================
    // 事件
    // ============================================

    /// @notice 当新session创建时触发
    event SessionCreated(
        uint256 indexed sessionId,
        address indexed stakingToken,
        address indexed rewardToken,
        address checkInRewardToken,
        uint256 totalReward,
        uint256 checkInRewardPool,
        uint256 startTime,
        uint256 endTime
    );

    /// @notice 当用户质押时触发
    event Deposited(
        uint256 indexed sessionId,
        address indexed user,
        uint256 amount,
        uint256 timestamp,
        uint256 totalStaked
    );

    /// @notice 当用户签到时触发
    event CheckedIn(
        uint256 indexed sessionId,
        address indexed user,
        uint256 timestamp
    );

    /// @notice 当用户提取时触发
    event Withdrawn(
        uint256 indexed sessionId,
        address indexed user,
        uint256 stakedAmount,
        uint256 rewardAmount,
        uint256 checkInReward,
        uint256 timestamp
    );

    // ============================================
    // 修饰符
    // ============================================

    /// @notice 检查session是否存在
    modifier sessionExists(uint256 _sessionId) {
        require(_sessionId > 0 && _sessionId <= currentSessionId, "Session does not exist");
        _;
    }

    /// @notice 检查session是否在活动期间
    modifier sessionInProgress(uint256 _sessionId) {
        Session storage session = sessions[_sessionId];
        require(block.timestamp >= session.startTime, "Session not started");
        require(block.timestamp <= session.endTime, "Session ended");
        _;
    }

    /// @notice 检查session是否已结束
    modifier sessionEnded(uint256 _sessionId) {
        Session storage session = sessions[_sessionId];
        require(block.timestamp > session.endTime, "Session not ended yet");
        _;
    }

    // ============================================
    // 构造函数
    // ============================================

    /// @notice 初始化合约
    /// @param _initialOwner 初始owner地址
    constructor(address _initialOwner) Ownable(_initialOwner) {
        currentSessionId = 0;
    }

    // ============================================
    // Owner函数
    // ============================================

    /// @notice 创建新的质押session
    /// @dev 必须确保时间不重叠，且owner拥有足够的奖励代币
    /// @param _stakingToken 质押代币地址 (address(0)表示BNB)
    /// @param _rewardToken LP质押奖励代币地址
    /// @param _checkInRewardToken 签到奖励代币地址
    /// @param _totalReward LP质押总奖励数量
    /// @param _checkInRewardPool 签到奖励池总数量
    /// @param _startTime 活动开始时间
    /// @param _endTime 活动结束时间
    function createSession(
        address _stakingToken,
        address _rewardToken,
        address _checkInRewardToken,
        uint256 _totalReward,
        uint256 _checkInRewardPool,
        uint256 _startTime,
        uint256 _endTime
    ) external payable onlyOwner whenNotPaused {
        // 参数验证
        require(_startTime > block.timestamp, "Start time must be in future");
        require(_endTime > _startTime, "End time must be after start time");
        require(_totalReward > 0, "Total reward must be greater than 0");
        require(_checkInRewardPool > 0, "CheckIn reward pool must be greater than 0");

        // 检查时间是否与任何历史session重叠
        _checkTimeOverlap(_startTime, _endTime);

        // 检查最近一个session是否已结束
        if (currentSessionId > 0) {
            Session storage lastSession = sessions[currentSessionId];
            require(block.timestamp > lastSession.endTime, "Previous session not ended");
        }

        // 从owner转入奖励代币
        if (_rewardToken != BNB_ADDRESS) {
            IERC20(_rewardToken).safeTransferFrom(msg.sender, address(this), _totalReward);
        } else {
            require(msg.value >= _totalReward, "Insufficient BNB for reward");
        }

        if (_checkInRewardToken != BNB_ADDRESS) {
            IERC20(_checkInRewardToken).safeTransferFrom(msg.sender, address(this), _checkInRewardPool);
        } else {
            // 如果奖励和签到奖励都是BNB，需要确保msg.value足够
            if (_rewardToken == BNB_ADDRESS) {
                require(msg.value >= _totalReward + _checkInRewardPool, "Insufficient BNB for both rewards");
            } else {
                require(msg.value >= _checkInRewardPool, "Insufficient BNB for checkIn reward");
            }
        }

        // 创建新session
        currentSessionId++;
        uint256 duration = _endTime - _startTime;

        sessions[currentSessionId] = Session({
            stakingToken: _stakingToken,
            rewardToken: _rewardToken,
            checkInRewardToken: _checkInRewardToken,
            totalReward: _totalReward,
            checkInRewardPool: _checkInRewardPool,
            startTime: _startTime,
            endTime: _endTime,
            totalStaked: 0,
            rewardPerSecond: _totalReward / duration,
            accRewardPerShare: 0,
            lastRewardTime: _startTime,
            totalWeightedStake: 0,
            active: true
        });

        // 记录时间范围
        sessionTimeRanges.push(TimeRange({
            startTime: _startTime,
            endTime: _endTime
        }));

        emit SessionCreated(
            currentSessionId,
            _stakingToken,
            _rewardToken,
            _checkInRewardToken,
            _totalReward,
            _checkInRewardPool,
            _startTime,
            _endTime
        );
    }

    /// @notice 暂停合约
    function pause() external onlyOwner {
        _pause();
    }

    /// @notice 恢复合约
    function unpause() external onlyOwner {
        _unpause();
    }

    // ============================================
    // 用户函数
    // ============================================

    /// @notice 用户质押代币到指定session
    /// @param _sessionId Session ID
    /// @param _amount 质押数量
    function deposit(uint256 _sessionId, uint256 _amount)
        external
        payable
        nonReentrant
        whenNotPaused
        sessionExists(_sessionId)
        sessionInProgress(_sessionId)
    {
        require(_amount > 0, "Amount must be greater than 0");

        Session storage session = sessions[_sessionId];
        UserInfo storage user = userInfo[_sessionId][msg.sender];

        // 更新session奖励
        _updatePool(_sessionId);

        // 如果用户已有质押，先结算之前的奖励（这里不实际转账，只更新rewardDebt，等session结束后一起领取）

        // 转入质押代币
        if (session.stakingToken != BNB_ADDRESS) {
            require(msg.value == 0, "Do not send BNB for ERC20 staking");
            IERC20(session.stakingToken).safeTransferFrom(msg.sender, address(this), _amount);
        } else {
            require(msg.value == _amount, "Incorrect BNB amount");
        }

        // 更新全局加权质押量（如果用户已签到）
        if (user.hasCheckedIn) {
            session.totalWeightedStake = session.totalWeightedStake - (user.amount * user.boost) + (user.amount + _amount) * user.boost;
        }

        // 更新用户状态
        user.amount += _amount;
        user.rewardDebt = user.amount * session.accRewardPerShare / SCALER;

        // 更新session总质押量
        session.totalStaked += _amount;

        emit Deposited(_sessionId, msg.sender, _amount, block.timestamp, session.totalStaked);
    }

    /// @notice 用户签到(每个session只能签到一次)
    /// @param _sessionId Session ID
    function checkIn(uint256 _sessionId)
        external
        nonReentrant
        whenNotPaused
        sessionExists(_sessionId)
        sessionInProgress(_sessionId)
    {
        UserInfo storage user = userInfo[_sessionId][msg.sender];
        Session storage session = sessions[_sessionId];

        require(user.amount > 0, "Must stake before check-in");
        require(!user.hasCheckedIn, "Already checked in");

        // 标记已签到，boost从0变为1
        user.hasCheckedIn = true;
        user.boost = 1;

        // 更新全局加权质押量：从 (amount * 0) 变为 (amount * 1)
        session.totalWeightedStake += user.amount;

        emit CheckedIn(_sessionId, msg.sender, block.timestamp);
    }

    /// @notice 用户提取本金和所有奖励(只能在session结束后)
    /// @param _sessionId Session ID
    function withdraw(uint256 _sessionId)
        external
        nonReentrant
        whenNotPaused
        sessionExists(_sessionId)
        sessionEnded(_sessionId)
    {
        UserInfo storage user = userInfo[_sessionId][msg.sender];
        Session storage session = sessions[_sessionId];

        require(user.amount > 0, "No staked amount");
        require(!user.hasWithdrawn, "Already withdrawn");

        // 更新pool到session结束时间
        _updatePool(_sessionId);

        // 计算LP质押奖励
        uint256 lpReward = (user.amount * session.accRewardPerShare / SCALER) - user.rewardDebt;

        // 计算签到奖励
        uint256 checkInReward = 0;
        if (user.hasCheckedIn && session.totalWeightedStake > 0) {
            // 签到奖励 = checkInRewardPool × (用户质押×boost) / 总加权质押
            uint256 userWeightedStake = user.amount * user.boost;
            checkInReward = (session.checkInRewardPool * userWeightedStake) / session.totalWeightedStake;
        }

        uint256 stakedAmount = user.amount;

        // 标记已提取，防止重复提取
        user.hasWithdrawn = true;

        // 更新全局状态
        session.totalStaked -= stakedAmount;
        if (user.hasCheckedIn) {
            session.totalWeightedStake -= (user.amount * user.boost);
        }

        // 转出质押本金
        _safeTransfer(session.stakingToken, msg.sender, stakedAmount);

        // 转出LP质押奖励
        if (lpReward > 0) {
            _safeTransfer(session.rewardToken, msg.sender, lpReward);
        }

        // 转出签到奖励
        if (checkInReward > 0) {
            _safeTransfer(session.checkInRewardToken, msg.sender, checkInReward);
        }

        emit Withdrawn(_sessionId, msg.sender, stakedAmount, lpReward, checkInReward, block.timestamp);
    }

    // ============================================
    // 查询函数
    // ============================================

    /// @notice 查询用户待领取的LP质押奖励
    /// @param _sessionId Session ID
    /// @param _user 用户地址
    /// @return 待领取的LP质押奖励数量
    function pendingReward(uint256 _sessionId, address _user)
        external
        view
        sessionExists(_sessionId)
        returns (uint256)
    {
        Session storage session = sessions[_sessionId];
        UserInfo storage user = userInfo[_sessionId][_user];

        if (user.amount == 0) {
            return 0;
        }

        uint256 accRewardPerShare = session.accRewardPerShare;

        if (block.timestamp > session.lastRewardTime && session.totalStaked > 0) {
            uint256 timeElapsed = _getElapsedTime(_sessionId, session.lastRewardTime);
            uint256 reward = timeElapsed * session.rewardPerSecond;
            accRewardPerShare += (reward * SCALER) / session.totalStaked;
        }

        return (user.amount * accRewardPerShare / SCALER) - user.rewardDebt;
    }

    /// @notice 查询用户的签到奖励(只有session结束后才能准确计算)
    /// @param _sessionId Session ID
    /// @param _user 用户地址
    /// @return 签到奖励数量
    function pendingCheckInReward(uint256 _sessionId, address _user)
        external
        view
        sessionExists(_sessionId)
        returns (uint256)
    {
        Session storage session = sessions[_sessionId];
        UserInfo storage user = userInfo[_sessionId][_user];

        if (!user.hasCheckedIn || session.totalWeightedStake == 0) {
            return 0;
        }

        uint256 userWeightedStake = user.amount * user.boost;
        return (session.checkInRewardPool * userWeightedStake) / session.totalWeightedStake;
    }

    /// @notice 获取session信息
    /// @param _sessionId Session ID
    function getSessionInfo(uint256 _sessionId)
        external
        view
        sessionExists(_sessionId)
        returns (Session memory)
    {
        return sessions[_sessionId];
    }

    /// @notice 获取用户信息
    /// @param _sessionId Session ID
    /// @param _user 用户地址
    function getUserInfo(uint256 _sessionId, address _user)
        external
        view
        sessionExists(_sessionId)
        returns (UserInfo memory)
    {
        return userInfo[_sessionId][_user];
    }

    // ============================================
    // 内部函数
    // ============================================

    /// @notice 更新pool的奖励
    /// @param _sessionId Session ID
    function _updatePool(uint256 _sessionId) internal {
        Session storage session = sessions[_sessionId];

        uint256 currentTime = block.timestamp;
        if (currentTime <= session.lastRewardTime) {
            return;
        }

        if (session.totalStaked == 0) {
            session.lastRewardTime = currentTime > session.endTime ? session.endTime : currentTime;
            return;
        }

        uint256 timeElapsed = _getElapsedTime(_sessionId, session.lastRewardTime);
        uint256 reward = timeElapsed * session.rewardPerSecond;

        session.accRewardPerShare += (reward * SCALER) / session.totalStaked;
        session.lastRewardTime = currentTime > session.endTime ? session.endTime : currentTime;
    }

    /// @notice 计算从lastTime到现在的有效时间(不超过session结束时间)
    /// @param _sessionId Session ID
    /// @param _lastTime 上次更新时间
    /// @return 有效的时间间隔(秒)
    function _getElapsedTime(uint256 _sessionId, uint256 _lastTime) internal view returns (uint256) {
        Session storage session = sessions[_sessionId];
        uint256 currentTime = block.timestamp > session.endTime ? session.endTime : block.timestamp;

        if (currentTime <= _lastTime) {
            return 0;
        }

        return currentTime - _lastTime;
    }

    /// @notice 检查新session时间是否与历史重叠
    /// @param _startTime 新session开始时间
    /// @param _endTime 新session结束时间
    function _checkTimeOverlap(uint256 _startTime, uint256 _endTime) internal view {
        for (uint256 i = 0; i < sessionTimeRanges.length; i++) {
            TimeRange memory range = sessionTimeRanges[i];

            // 检查是否重叠: 新区间的开始时间在旧区间内，或新区间的结束时间在旧区间内，或新区间完全包含旧区间
            bool overlap = (_startTime < range.endTime && _endTime > range.startTime);

            require(!overlap, "Session time overlaps with existing session");
        }
    }

    /// @notice 安全转账函数(支持BNB和ERC20)
    /// @param _token 代币地址 (address(0)表示BNB)
    /// @param _to 接收地址
    /// @param _amount 转账数量
    function _safeTransfer(address _token, address _to, uint256 _amount) internal {
        if (_amount == 0) {
            return;
        }

        if (_token == BNB_ADDRESS) {
            (bool success, ) = payable(_to).call{value: _amount}("");
            require(success, "BNB transfer failed");
        } else {
            IERC20(_token).safeTransfer(_to, _amount);
        }
    }

    // ============================================
    // 接收BNB
    // ============================================

    /// @notice 接收BNB (用于owner存入奖励)
    receive() external payable {}
}
