{"language":"Solidity","sources":{"src/Staking.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Staking - LP代币质押与签到奖励合约\n/// @author Seascape Network\n/// @notice 本合约支持LP/ERC20/BNB质押，线性释放奖励，以及基于签到的额外激励\n/// @dev 使用OpenZeppelin v5.0.2，Solidity 0.8.20，包含重入保护和暂停机制\ncontract Staking is Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    // ============================================\n    // 常量\n    // ============================================\n\n    /// @notice 精度缩放因子，用于高精度计算\n    uint256 private constant SCALER = 1e18;\n\n    /// @notice BNB原生代币的地址表示\n    address private constant BNB_ADDRESS = address(0);\n\n    // ============================================\n    // 数据结构\n    // ============================================\n\n    /// @notice 创建Session的参数结构体\n    /// @dev 用于减少createSession函数的参数数量，避免stack too deep\n    struct CreateSessionParams {\n        address stakingToken;           // 质押代币地址 (address(0)表示BNB)\n        address rewardToken;            // LP质押奖励代币地址\n        address checkInRewardToken;     // 签到奖励代币地址\n        uint256 totalReward;            // LP质押总奖励数量\n        uint256 checkInRewardPool;      // 签到奖励池总数量\n        uint256 startTime;              // 活动开始时间(unix时间戳)\n        uint256 endTime;                // 活动结束时间(unix时间戳)\n    }\n\n    /// @notice Session质押活动结构体\n    /// @dev 每个session代表一轮独立的质押活动\n    struct Session {\n        address stakingToken;           // 质押代币地址 (address(0)表示BNB)\n        address rewardToken;            // LP质押奖励代币地址\n        address checkInRewardToken;     // 签到奖励代币地址\n        uint256 totalReward;            // LP质押总奖励数量\n        uint256 checkInRewardPool;      // 签到奖励池总数量\n        uint256 startTime;              // 活动开始时间(unix时间戳)\n        uint256 endTime;                // 活动结束时间(unix时间戳)\n        uint256 totalStaked;            // 当前总质押量(TVL)\n        uint256 rewardPerSecond;        // 每秒释放的奖励 = totalReward / duration\n        uint256 accRewardPerShare;      // 累积的每份额奖励(scaled by SCALER)\n        uint256 lastRewardTime;         // 上次更新奖励的时间\n        uint256 totalWeightedStake;     // 全局加权质押量 Σ(用户质押 × boost点数)\n        bool active;                    // session是否激活(防止重复使用)\n    }\n\n    /// @notice 用户信息结构体\n    /// @dev 记录每个用户在特定session中的状态\n    struct UserInfo {\n        uint256 amount;                 // 用户质押数量\n        uint256 rewardDebt;             // 奖励债务(用于计算待领取奖励)\n        uint256 boost;                  // 用户boost点数(每次签到+1，无上限)\n        uint40 lastCheckInTime;         // 最后一次签到时间戳(用于5分钟冷却检查)\n        bool hasWithdrawn;              // 是否已提取(防止重复提取)\n    }\n\n    // ============================================\n    // 状态变量\n    // ============================================\n\n    /// @notice 当前session ID计数器\n    uint256 public currentSessionId;\n\n    /// @notice sessionId => Session信息\n    mapping(uint256 => Session) public sessions;\n\n    /// @notice sessionId => user address => UserInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    /// @notice 记录所有历史session的时间范围，用于检查重叠\n    struct TimeRange {\n        uint256 startTime;\n        uint256 endTime;\n    }\n    TimeRange[] private sessionTimeRanges;\n\n    // ============================================\n    // 事件\n    // ============================================\n\n    /// @notice 当新session创建时触发\n    event SessionCreated(\n        uint256 indexed sessionId,\n        address indexed stakingToken,\n        address indexed rewardToken,\n        address checkInRewardToken,\n        uint256 totalReward,\n        uint256 checkInRewardPool,\n        uint256 startTime,\n        uint256 endTime\n    );\n\n    /// @notice 当用户质押时触发\n    event Deposited(\n        uint256 indexed sessionId,\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 totalStaked\n    );\n\n    /// @notice 当用户签到时触发\n    event CheckedIn(\n        uint256 indexed sessionId,\n        address indexed user,\n        uint256 timestamp\n    );\n\n    /// @notice 当用户提取时触发\n    event Withdrawn(\n        uint256 indexed sessionId,\n        address indexed user,\n        uint256 stakedAmount,\n        uint256 rewardAmount,\n        uint256 checkInReward,\n        uint256 timestamp\n    );\n\n    // ============================================\n    // 修饰符\n    // ============================================\n\n    /// @notice 检查session是否存在\n    modifier sessionExists(uint256 _sessionId) {\n        require(_sessionId > 0 && _sessionId <= currentSessionId, \"Session does not exist\");\n        _;\n    }\n\n    /// @notice 检查session是否在活动期间\n    modifier sessionInProgress(uint256 _sessionId) {\n        Session storage session = sessions[_sessionId];\n        require(block.timestamp >= session.startTime, \"Session not started\");\n        require(block.timestamp <= session.endTime, \"Session ended\");\n        _;\n    }\n\n    /// @notice 检查session是否已结束\n    modifier sessionEnded(uint256 _sessionId) {\n        Session storage session = sessions[_sessionId];\n        require(block.timestamp > session.endTime, \"Session not ended yet\");\n        _;\n    }\n\n    // ============================================\n    // 构造函数\n    // ============================================\n\n    /// @notice 初始化合约\n    /// @param _initialOwner 初始owner地址\n    constructor(address _initialOwner) Ownable(_initialOwner) {\n        currentSessionId = 0;\n    }\n\n    // ============================================\n    // Owner函数\n    // ============================================\n\n    /// @notice 创建新的质押session\n    /// @dev 必须确保时间不重叠，且owner拥有足够的奖励代币\n    /// @param params 创建session的参数结构体\n    function createSession(CreateSessionParams calldata params)\n        external\n        payable\n        onlyOwner\n        whenNotPaused\n    {\n        // 参数验证\n        require(params.startTime > block.timestamp, \"Start time must be in future\");\n        require(params.endTime > params.startTime, \"End time must be after start time\");\n        require(params.totalReward > 0, \"Total reward must be greater than 0\");\n        require(params.checkInRewardPool > 0, \"CheckIn reward pool must be greater than 0\");\n\n        // 检查时间是否与任何历史session重叠\n        _checkTimeOverlap(params.startTime, params.endTime);\n\n        // 检查最近一个session是否已结束\n        if (currentSessionId > 0) {\n            require(block.timestamp > sessions[currentSessionId].endTime, \"Previous session not ended\");\n        }\n\n        // 缓存地址值以减少stack使用\n        address _rewardToken = params.rewardToken;\n        address _checkInToken = params.checkInRewardToken;\n\n        // 转入LP奖励代币\n        if (_rewardToken != BNB_ADDRESS) {\n            require(IERC20(_rewardToken).transferFrom(msg.sender, address(this), params.totalReward), \"Reward transfer failed\");\n        } else {\n            require(msg.value >= params.totalReward, \"Insufficient BNB for reward\");\n        }\n\n        // 转入签到奖励代币\n        if (_checkInToken != BNB_ADDRESS) {\n            require(IERC20(_checkInToken).transferFrom(msg.sender, address(this), params.checkInRewardPool), \"CheckIn transfer failed\");\n        } else {\n            if (_rewardToken == BNB_ADDRESS) {\n                require(msg.value >= params.totalReward + params.checkInRewardPool, \"Insufficient BNB\");\n            } else {\n                require(msg.value >= params.checkInRewardPool, \"Insufficient BNB\");\n            }\n        }\n\n        // 创建新session\n        _createNewSession(params);\n\n        emit SessionCreated(\n            currentSessionId,\n            params.stakingToken,\n            _rewardToken,\n            _checkInToken,\n            params.totalReward,\n            params.checkInRewardPool,\n            params.startTime,\n            params.endTime\n        );\n    }\n\n    /// @notice 暂停合约\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /// @notice 恢复合约\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // ============================================\n    // 用户函数\n    // ============================================\n\n    /// @notice 用户质押代币到指定session\n    /// @param _sessionId Session ID\n    /// @param _amount 质押数量\n    function deposit(uint256 _sessionId, uint256 _amount)\n        external\n        payable\n        nonReentrant\n        whenNotPaused\n        sessionExists(_sessionId)\n        sessionInProgress(_sessionId)\n    {\n        require(_amount > 0, \"Amount must be greater than 0\");\n\n        // 更新session奖励\n        _updatePool(_sessionId);\n\n        // 处理质押\n        _processDeposit(_sessionId, _amount);\n    }\n\n    /// @notice 用户签到(需距离上次签到至少5分钟)\n    /// @param _sessionId Session ID\n    function checkIn(uint256 _sessionId)\n        external\n        nonReentrant\n        whenNotPaused\n        sessionExists(_sessionId)\n        sessionInProgress(_sessionId)\n    {\n        UserInfo storage user = userInfo[_sessionId][msg.sender];\n        Session storage session = sessions[_sessionId];\n\n        require(user.amount > 0, \"Must stake before check-in\");\n        require(block.timestamp >= user.lastCheckInTime + 300, \"Check-in cooldown not expired\");\n\n        // 更新全局加权质押量: 从 (amount * oldBoost) 变为 (amount * newBoost)\n        uint256 oldWeightedStake = user.amount * user.boost;\n        user.boost += 1;\n        uint256 newWeightedStake = user.amount * user.boost;\n\n        session.totalWeightedStake = session.totalWeightedStake - oldWeightedStake + newWeightedStake;\n\n        // 更新最后签到时间\n        user.lastCheckInTime = uint40(block.timestamp);\n\n        emit CheckedIn(_sessionId, msg.sender, block.timestamp);\n    }\n\n    /// @notice 用户提取本金和所有奖励(只能在session结束后)\n    /// @param _sessionId Session ID\n    function withdraw(uint256 _sessionId)\n        external\n        nonReentrant\n        whenNotPaused\n        sessionExists(_sessionId)\n        sessionEnded(_sessionId)\n    {\n        UserInfo storage user = userInfo[_sessionId][msg.sender];\n        require(user.amount > 0, \"No staked amount\");\n        require(!user.hasWithdrawn, \"Already withdrawn\");\n\n        // 更新pool到session结束时间\n        _updatePool(_sessionId);\n\n        // 计算奖励并执行提取\n        _processWithdrawal(_sessionId, user);\n    }\n\n    // ============================================\n    // 查询函数\n    // ============================================\n\n    /// @notice 查询用户待领取的LP质押奖励\n    /// @param _sessionId Session ID\n    /// @param _user 用户地址\n    /// @return 待领取的LP质押奖励数量\n    function pendingReward(uint256 _sessionId, address _user)\n        external\n        view\n        sessionExists(_sessionId)\n        returns (uint256)\n    {\n        Session storage session = sessions[_sessionId];\n        UserInfo storage user = userInfo[_sessionId][_user];\n\n        if (user.amount == 0) {\n            return 0;\n        }\n\n        uint256 accRewardPerShare = session.accRewardPerShare;\n\n        if (block.timestamp > session.lastRewardTime && session.totalStaked > 0) {\n            uint256 timeElapsed = _getElapsedTime(_sessionId, session.lastRewardTime);\n            uint256 reward = timeElapsed * session.rewardPerSecond;\n            accRewardPerShare += (reward * SCALER) / session.totalStaked;\n        }\n\n        return (user.amount * accRewardPerShare / SCALER) - user.rewardDebt;\n    }\n\n    /// @notice 查询用户的签到奖励(只有session结束后才能准确计算)\n    /// @param _sessionId Session ID\n    /// @param _user 用户地址\n    /// @return 签到奖励数量\n    function pendingCheckInReward(uint256 _sessionId, address _user)\n        external\n        view\n        sessionExists(_sessionId)\n        returns (uint256)\n    {\n        Session storage session = sessions[_sessionId];\n        UserInfo storage user = userInfo[_sessionId][_user];\n\n        if (user.boost == 0 || session.totalWeightedStake == 0) {\n            return 0;\n        }\n\n        uint256 userWeightedStake = user.amount * user.boost;\n        return (session.checkInRewardPool * userWeightedStake) / session.totalWeightedStake;\n    }\n\n    /// @notice 获取session信息\n    /// @param _sessionId Session ID\n    function getSessionInfo(uint256 _sessionId)\n        external\n        view\n        sessionExists(_sessionId)\n        returns (Session memory)\n    {\n        return sessions[_sessionId];\n    }\n\n    /// @notice 获取用户信息\n    /// @param _sessionId Session ID\n    /// @param _user 用户地址\n    function getUserInfo(uint256 _sessionId, address _user)\n        external\n        view\n        sessionExists(_sessionId)\n        returns (UserInfo memory)\n    {\n        return userInfo[_sessionId][_user];\n    }\n\n    // ============================================\n    // 内部函数\n    // ============================================\n\n    /// @notice 创建新session并记录\n    /// @param params session参数\n    function _createNewSession(CreateSessionParams calldata params) internal {\n        currentSessionId++;\n\n        sessions[currentSessionId] = Session({\n            stakingToken: params.stakingToken,\n            rewardToken: params.rewardToken,\n            checkInRewardToken: params.checkInRewardToken,\n            totalReward: params.totalReward,\n            checkInRewardPool: params.checkInRewardPool,\n            startTime: params.startTime,\n            endTime: params.endTime,\n            totalStaked: 0,\n            rewardPerSecond: params.totalReward / (params.endTime - params.startTime),\n            accRewardPerShare: 0,\n            lastRewardTime: params.startTime,\n            totalWeightedStake: 0,\n            active: true\n        });\n\n        // 记录时间范围\n        sessionTimeRanges.push(TimeRange({\n            startTime: params.startTime,\n            endTime: params.endTime\n        }));\n    }\n\n    /// @notice 处理用户提取逻辑\n    /// @param _sessionId Session ID\n    /// @param user 用户信息引用\n    function _processWithdrawal(uint256 _sessionId, UserInfo storage user) internal {\n        Session storage session = sessions[_sessionId];\n\n        // 计算LP质押奖励\n        uint256 lpReward = (user.amount * session.accRewardPerShare / SCALER) - user.rewardDebt;\n\n        // 计算签到奖励\n        uint256 checkInReward = _calculateCheckInReward(_sessionId, user);\n\n        uint256 stakedAmount = user.amount;\n\n        // 标记已提取，防止重复提取\n        user.hasWithdrawn = true;\n\n        // 更新全局状态\n        session.totalStaked -= stakedAmount;\n        if (user.boost > 0) {\n            session.totalWeightedStake -= (user.amount * user.boost);\n        }\n\n        // 转出所有代币\n        _transferWithdrawals(session, stakedAmount, lpReward, checkInReward);\n\n        emit Withdrawn(_sessionId, msg.sender, stakedAmount, lpReward, checkInReward, block.timestamp);\n    }\n\n    /// @notice 计算签到奖励\n    /// @param _sessionId Session ID\n    /// @param user 用户信息\n    /// @return 签到奖励数量\n    function _calculateCheckInReward(uint256 _sessionId, UserInfo storage user) internal view returns (uint256) {\n        if (user.boost == 0) {\n            return 0;\n        }\n\n        Session storage session = sessions[_sessionId];\n        if (session.totalWeightedStake == 0) {\n            return 0;\n        }\n\n        uint256 userWeightedStake = user.amount * user.boost;\n        return (session.checkInRewardPool * userWeightedStake) / session.totalWeightedStake;\n    }\n\n    /// @notice 转出提取的代币\n    /// @param session Session信息\n    /// @param stakedAmount 质押本金\n    /// @param lpReward LP奖励\n    /// @param checkInReward 签到奖励\n    function _transferWithdrawals(\n        Session storage session,\n        uint256 stakedAmount,\n        uint256 lpReward,\n        uint256 checkInReward\n    ) internal {\n        // 转出质押本金\n        _safeTransfer(session.stakingToken, msg.sender, stakedAmount);\n\n        // 转出LP质押奖励\n        if (lpReward > 0) {\n            _safeTransfer(session.rewardToken, msg.sender, lpReward);\n        }\n\n        // 转出签到奖励\n        if (checkInReward > 0) {\n            _safeTransfer(session.checkInRewardToken, msg.sender, checkInReward);\n        }\n    }\n\n    /// @notice 处理质押逻辑\n    /// @param _sessionId Session ID\n    /// @param _amount 质押数量\n    function _processDeposit(uint256 _sessionId, uint256 _amount) internal {\n        Session storage session = sessions[_sessionId];\n        UserInfo storage user = userInfo[_sessionId][msg.sender];\n\n        // 转入质押代币\n        if (session.stakingToken != BNB_ADDRESS) {\n            require(msg.value == 0, \"Do not send BNB for ERC20 staking\");\n            IERC20(session.stakingToken).safeTransferFrom(msg.sender, address(this), _amount);\n        } else {\n            require(msg.value == _amount, \"Incorrect BNB amount\");\n        }\n\n        // 更新用户状态\n        user.amount += _amount;\n        user.rewardDebt = user.amount * session.accRewardPerShare / SCALER;\n\n        // 更新session总质押量\n        session.totalStaked += _amount;\n\n        emit Deposited(_sessionId, msg.sender, _amount, block.timestamp, session.totalStaked);\n    }\n\n    /// @notice 更新pool的奖励\n    /// @param _sessionId Session ID\n    function _updatePool(uint256 _sessionId) internal {\n        Session storage session = sessions[_sessionId];\n\n        uint256 currentTime = block.timestamp;\n        if (currentTime <= session.lastRewardTime) {\n            return;\n        }\n\n        if (session.totalStaked == 0) {\n            session.lastRewardTime = currentTime > session.endTime ? session.endTime : currentTime;\n            return;\n        }\n\n        uint256 timeElapsed = _getElapsedTime(_sessionId, session.lastRewardTime);\n        uint256 reward = timeElapsed * session.rewardPerSecond;\n\n        session.accRewardPerShare += (reward * SCALER) / session.totalStaked;\n        session.lastRewardTime = currentTime > session.endTime ? session.endTime : currentTime;\n    }\n\n    /// @notice 计算从lastTime到现在的有效时间(不超过session结束时间)\n    /// @param _sessionId Session ID\n    /// @param _lastTime 上次更新时间\n    /// @return 有效的时间间隔(秒)\n    function _getElapsedTime(uint256 _sessionId, uint256 _lastTime) internal view returns (uint256) {\n        Session storage session = sessions[_sessionId];\n        uint256 currentTime = block.timestamp > session.endTime ? session.endTime : block.timestamp;\n\n        if (currentTime <= _lastTime) {\n            return 0;\n        }\n\n        return currentTime - _lastTime;\n    }\n\n    /// @notice 检查新session时间是否与历史重叠\n    /// @param _startTime 新session开始时间\n    /// @param _endTime 新session结束时间\n    function _checkTimeOverlap(uint256 _startTime, uint256 _endTime) internal view {\n        for (uint256 i = 0; i < sessionTimeRanges.length; i++) {\n            TimeRange memory range = sessionTimeRanges[i];\n\n            // 检查是否重叠: 新区间的开始时间在旧区间内，或新区间的结束时间在旧区间内，或新区间完全包含旧区间\n            bool overlap = (_startTime < range.endTime && _endTime > range.startTime);\n\n            require(!overlap, \"Session time overlaps with existing session\");\n        }\n    }\n\n    /// @notice 安全转账函数(支持BNB和ERC20)\n    /// @param _token 代币地址 (address(0)表示BNB)\n    /// @param _to 接收地址\n    /// @param _amount 转账数量\n    function _safeTransfer(address _token, address _to, uint256 _amount) internal {\n        if (_amount == 0) {\n            return;\n        }\n\n        if (_token == BNB_ADDRESS) {\n            (bool success, ) = payable(_to).call{value: _amount}(\"\");\n            require(success, \"BNB transfer failed\");\n        } else {\n            IERC20(_token).safeTransfer(_to, _amount);\n        }\n    }\n\n    // ============================================\n    // 接收BNB\n    // ============================================\n\n    /// @notice 接收BNB (用于owner存入奖励)\n    receive() external payable {}\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","forge-std/=lib/forge-std/src/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"shanghai","viaIR":true,"libraries":{}}}
